it('should handleNextPage and increment page number correctly', async () => {
    getRelatedObjectsAndRecords.mockResolvedValueOnce({
        Account__c: {
            fields: ['Name', 'Custom_Field__c'],
            records: Array.from({ length: 21 }).map((_, i) => ({
                Id: `001${i}`,
                Name: `Test ${i + 1}`,
                Custom_Field__c: `Field ${i + 1}`
            }))
        }
    });

    const element = createElement('c-apm-my-records', {
        is: ApmMyRecords
    });
    document.body.appendChild(element);
    await Promise.resolve(); // wait for render
    element.connectedCallback();
    await Promise.resolve(); // wait for Apex result

    const nextButtonIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronright"]');
    nextButtonIcon.dispatchEvent(new CustomEvent('click', {
        bubbles: true,
        composed: true
    }));

    // simulate second click to increase page from 2 to 3 (only if more than 20 items)
    nextButtonIcon.dispatchEvent(new CustomEvent('click', {
        bubbles: true,
        composed: true
    }));

    await Promise.resolve();
});

it('should handlePrevPage and decrement page number correctly', async () => {
    getRelatedObjectsAndRecords.mockResolvedValueOnce({
        Account__c: {
            fields: ['Name', 'Custom_Field__c'],
            records: Array.from({ length: 20 }).map((_, i) => ({
                Id: `001${i}`,
                Name: `Test ${i + 1}`,
                Custom_Field__c: `Value ${i + 1}`
            }))
        }
    });

    const element = createElement('c-apm-my-records', {
        is: ApmMyRecords
    });
    document.body.appendChild(element);

    element.connectedCallback();
    await Promise.resolve();

    // Set current page to 2 to test going back to 1
    element.pages = { Account__c: 2 };
    await Promise.resolve();

    const prevButtonIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronleft"]');
    prevButtonIcon.dispatchEvent(new CustomEvent('click', {
        bubbles: true,
        composed: true
    }));

    await Promise.resolve();
});
