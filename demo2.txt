describe('Pagination Handlers and Footer UI', () => {
    // Import the pagination mock data with more than 10 records
    const mockPaginationData = require('./data/relatedObjectsAndRecordsWithPagination.json');

    it('handleNextPage moves from page 1 to 2, updates UI accordingly', async () => {
        getRelatedObjectsAndRecords.mockResolvedValue(mockPaginationData);
        const element = createElement('c-a-p-m-my-records', { is: ApmMyRecords });
        document.body.appendChild(element);
        await Promise.resolve();

        // Initial footer and page state on page 1
        const footerText = element.shadowRoot.querySelector('.slds-text-body_small').textContent.trim();
        expect(footerText).toBe('Showing 1 to 10 of 12 results');

        const pageIndicator = element.shadowRoot.querySelector('.slds-button-group span').textContent.trim();
        expect(pageIndicator).toBe('1 / 2');

        // Dispatch click on "Next" lightning-icon to trigger handleNextPage
        const nextIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronright"]');
        nextIcon.dispatchEvent(new CustomEvent('click'));
        await Promise.resolve();

        // Assert page changed to 2
        expect(element.pages.Account).toBe(2);

        // Footer and page indicator updated accordingly
        const newFooterText = element.shadowRoot.querySelector('.slds-text-body_small').textContent.trim();
        expect(newFooterText).toBe('Showing 11 to 12 of 12 results');

        const newPageIndicator = element.shadowRoot.querySelector('.slds-button-group span').textContent.trim();
        expect(newPageIndicator).toBe('2 / 2');
    });

    it('handlePrevPage moves from page 2 back to 1, updates UI accordingly', async () => {
        getRelatedObjectsAndRecords.mockResolvedValue(mockPaginationData);
        const element = createElement('c-a-p-m-my-records', { is: ApmMyRecords });
        document.body.appendChild(element);
        
        // Manually set page to 2
        element.pages = { Account: 2 };
        await Promise.resolve();

        expect(element.pages.Account).toBe(2);
        let pageIndicator = element.shadowRoot.querySelector('.slds-button-group span').textContent.trim();
        expect(pageIndicator).toBe('2 / 2');

        // Dispatch click on "Previous" lightning-icon to trigger handlePrevPage
        const prevIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronleft"]');
        prevIcon.dispatchEvent(new CustomEvent('click'));
        await Promise.resolve();

        // Assert page changed back to 1
        expect(element.pages.Account).toBe(1);

        // Footer and page indicator updated accordingly
        const footerText = element.shadowRoot.querySelector('.slds-text-body_small').textContent.trim();
        expect(footerText).toBe('Showing 1 to 10 of 12 results');

        pageIndicator = element.shadowRoot.querySelector('.slds-button-group span').textContent.trim();
        expect(pageIndicator).toBe('1 / 2');
    });

    it('does not go below page 1 or above totalPages when clicking Prev/Next beyond limits', async () => {
        getRelatedObjectsAndRecords.mockResolvedValue(mockPaginationData);
        const element = createElement('c-a-p-m-my-records', { is: ApmMyRecords });
        document.body.appendChild(element);
        await Promise.resolve();

        // Initially page 1
        expect(element.pages.Account).toBe(1);

        // Click previous on first page - should remain page 1
        const prevIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronleft"]');
        prevIcon.dispatchEvent(new CustomEvent('click'));
        await Promise.resolve();
        expect(element.pages.Account).toBe(1);

        // Move to last page
        element.pages = { Account: 2 };
        await Promise.resolve();
        expect(element.pages.Account).toBe(2);

        // Click next on last page - should remain page 2
        const nextIcon = element.shadowRoot.querySelector('lightning-icon[icon-name="utility:chevronright"]');
        nextIcon.dispatchEvent(new CustomEvent('click'));
        await Promise.resolve();
        expect(element.pages.Account).toBe(2);
    });
});
