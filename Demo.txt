import { createElement } from 'lwc';
import ApmMyAssessment from 'c/apmMyAssessment';
import getPendingApplications from '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments';

jest.mock(
    '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments',
    () => ({
        default: jest.fn()
    }),
    { virtual: true }
);

jest.mock(
    '@salesforce/label/c.APM_Attestation_Link',
    () => 'https://assessment-link.com',
    { virtual: true }
);

describe('c-apm-my-assessment', () => {
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    it('renders application list correctly (based on rendered DOM)', async () => {
        const mockData = Array.from({ length: 10 }, (_, i) => ({
            Id: `app${i + 1}`,
            Name: `Application ${i + 1}`
        }));
        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });

        document.body.appendChild(element);
        await Promise.resolve();

        // Validate rendered elements â€” not private fields
        const renderedItems = element.shadowRoot.querySelectorAll('[data-id]');
        expect(renderedItems.length).toBe(8); // PAGE_SIZE
    });

    it('shows no data if Apex fails (error handling)', async () => {
        getPendingApplications.mockRejectedValue(new Error('Apex failed'));

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);

        await Promise.resolve();

        // It shouldn't render any assessments
        const renderedItems = element.shadowRoot.querySelectorAll('[data-id]');
        expect(renderedItems.length).toBe(0);
    });

    it('navigates to assessment link on Take button click', async () => {
        getPendingApplications.mockResolvedValue([
            { Id: '001ABC123', Name: 'Test App' }
        ]);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);
        await Promise.resolve();

        const openSpy = jest.spyOn(window, 'open').mockImplementation(() => {});

        const takeBtn = element.shadowRoot.querySelector('[data-id="001ABC123"]');
        expect(takeBtn).toBeTruthy();
        takeBtn.click();

        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('https://assessment-link.com'),
            '_blank'
        );
        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('c__ContextId=001ABC123'),
            '_blank'
        );

        openSpy.mockRestore();
    });

    it('handles pagination with next and previous', async () => {
        getPendingApplications.mockResolvedValue(
            Array.from({ length: 10 }, (_, i) => ({ Id: `app${i + 1}` }))
        );

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });

        document.body.appendChild(element);
        await Promise.resolve();

        // Initially, page 1, 8 items
        let items = element.shadowRoot.querySelectorAll('[data-id]');
        expect(items.length).toBe(8);

        // Move to next page
        element.handleNext();
        await Promise.resolve();
        items = element.shadowRoot.querySelectorAll('[data-id]');
        expect(items.length).toBe(2);

        // Back to previous page
        element.handlePrev();
        await Promise.resolve();
        items = element.shadowRoot.querySelectorAll('[data-id]');
        expect(items.length).toBe(8);
    });

    it('toggles modal using handleViewAll and handleCloseModal', () => {
        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });

        document.body.appendChild(element);

        expect(element.showModal).toBe(false);
        element.handleViewAll();
        expect(element.showModal).toBe(true);
        element.handleCloseModal();
        expect(element.showModal).toBe(false);
    });
});
