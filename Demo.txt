//-----------------------JestClass---------------------------------//
// import { createElement } from 'lwc';
// import ApmMyRecords from 'c/aPM_MyRecords';
// import getRelatedObjectsAndRecords from '@salesforce/apex/APM_apLWC_MyRecordsController.getRelatedObjectsAndRecords';
// import getRelated from '@salesforce/apex/APM_apLWC_MyRecordsController.getAllRelatedRecords';
// import getRelatedParent from '@salesforce/apex/APM_apLWC_MyRecordsController.getParentRecords';

// // Mock JSON data
// const mockRelatedObjectsAndRecords = require('./data/relatedObjectsAndRecords.json');
// const mockRelated = require('./data/relatedRecords.json');
// const mockParent = require('./data/parentRecords.json');

// // Mock Apex
// jest.mock('@salesforce/apex/APM_apLWC_MyRecordsController.getRelatedObjectsAndRecords', () => ({
//     default: jest.fn()
// }), { virtual: true });

// jest.mock('@salesforce/apex/APM_apLWC_MyRecordsController.getAllRelatedRecords', () => ({
//     default: jest.fn()
// }), { virtual: true });

// jest.mock('@salesforce/apex/APM_apLWC_MyRecordsController.getParentRecords', () => ({
//     default: jest.fn()
// }), { virtual: true });

// describe('c-a-p-m-my-records', () => {
//     afterEach(() => {
//         while (document.body.firstChild) {
//             document.body.removeChild(document.body.firstChild);
//         }
//         jest.clearAllMocks();
//     });

//     async function flushPromises() {
//         return Promise.resolve();
//     }

//     it('renders tables for relatedData', async () => {
//         getRelatedObjectsAndRecords.mockResolvedValue(mockRelatedObjectsAndRecords);

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         // Should render two tables (Account and Contact)
//         const tables = element.shadowRoot.querySelectorAll('table.slds-table');
//         expect(tables.length).toBe(2);

//         // Should render record links
//         const recordLinks = element.shadowRoot.querySelectorAll('a.slds-text-link');
//         expect(recordLinks.length).toBe(3);
//     });

//     it('renders "No Records Found" when no records', async () => {
//         getRelatedObjectsAndRecords.mockResolvedValue({
//             EmptyObj: {
//                 fields: ['Id', 'Name', 'Custom_Field__c'],
//                 records: []
//             }
//         });

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         const noRecords = element.shadowRoot.querySelector('.no-records-container h3');
//         expect(noRecords).not.toBeNull();
//         expect(noRecords.textContent).toBe('No Records Found');
//     });

//     it('shows error message when Apex fails', async () => {
//         getRelatedObjectsAndRecords.mockRejectedValue({ body: { message: 'Test error' } });

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         const errorMsg = element.shadowRoot.querySelector('.slds-text-color_error');
//         expect(errorMsg).not.toBeNull();
//         expect(errorMsg.textContent).toContain('Test error');
//     });

//     it('opens modal and loads related/parent records on icon click', async () => {
//         getRelatedObjectsAndRecords.mockResolvedValue(mockRelatedObjectsAndRecords);
//         getRelated.mockResolvedValue(mockRelated);
//         getRelatedParent.mockResolvedValue(mockParent);

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         // Simulate click on lightning-icon for first Account record
//         const icon = element.shadowRoot.querySelector('lightning-icon[data-index="0"][data-objectindex="0"]');
//         expect(icon).not.toBeNull();
//         icon.click();

//         await flushPromises();
//         await flushPromises();

//         // Modal should now be open
//         expect(element.shadowRoot.querySelector('.slds-modal.slds-fade-in-open')).not.toBeNull();

//         // Should display related/parent records in accordion
//         const accordionSections = element.shadowRoot.querySelectorAll('lightning-accordion-section');
//         expect(accordionSections.length).toBeGreaterThan(0);
//     });

//     it('shows "No Records Found" in modal accordion if no related records', async () => {
//         getRelatedObjectsAndRecords.mockResolvedValue(mockRelatedObjectsAndRecords);
//         getRelated.mockResolvedValue({});
//         getRelatedParent.mockResolvedValue({});

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         // Click icon to open modal
//         const icon = element.shadowRoot.querySelector('lightning-icon[data-index="0"][data-objectindex="0"]');
//         icon.click();

//         await flushPromises();
//         await flushPromises();

//         // Should show "No Records Found" in modal
//         // Looks for a <p> after the accordion
//         const modalNoRecords = [...element.shadowRoot.querySelectorAll('p')]
//             .find(p => p.textContent.includes('No Records Found'));
//         expect(modalNoRecords).not.toBeNull();
//         expect(modalNoRecords.textContent).toContain('No Records Found');
//     });

//     it('handles modal close', async () => {
//         getRelatedObjectsAndRecords.mockResolvedValue(mockRelatedObjectsAndRecords);
//         getRelated.mockResolvedValue(mockRelated);
//         getRelatedParent.mockResolvedValue(mockParent);

//         const element = createElement('c-a-p-m-my-records', {
//             is: ApmMyRecords
//         });
//         document.body.appendChild(element);

//         await flushPromises();

//         // Open modal
//         const icon = element.shadowRoot.querySelector('lightning-icon[data-index="0"][data-objectindex="0"]');
//         icon.click();

//         await flushPromises();
//         await flushPromises();

//         // Click Cancel button to close modal
//         const cancelBtn = element.shadowRoot.querySelector('button[aria-label="Cancel and close"]');
//         cancelBtn.click();

//         await flushPromises();

//         // Modal should close
//         expect(element.shadowRoot.querySelector('.slds-modal.slds-fade-in-open')).toBeNull();
//     });

// });

//----------------------------HTML-----------------------------------------//
{/* <template>
    <template if:true={pagedObjects}>
        <div class="slds-grid slds-wrap">
            <template for:each={pagedObjects} for:item="objectData" for:index="objectIndex">
                <div key={objectData.objectName}
                    class="slds-col slds-size_1-of-1 slds-small-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3 slds-p-around_xx-small">
                    <div class="TableCard">
                        <div class="TableCardHeader slds-grid slds-grid_align-spread">
                            <h2 class="TableCardTitle">{objectData.objectLabel}</h2>
                        </div>
                        <div class="TableCardBody">
                            <div style="height:100%" class="slds-scrollable_x">
                                <template if:true={objectData.records.length}>
                                    <div>
                                        <table
                                            class="slds-table slds-table_cell-buffer slds-table_bordered slds-table_fixed-layout">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Name</th>
                                                    <template for:each={objectData.fields} for:item="field">
                                                        <th scope="col" key={field.apiName}>{field.label}</th>
                                                    </template>
                                                    <th scope="col">&nbsp;</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <template for:each={objectData.pageRecords} for:item="record"
                                                    for:index="recordIndex">
                                                    <tr key={record.recordUrl}>
                                                        <td class="truncate-cell" title={record.name}>
                                                            <a href={record.recordUrl} rel="noopener"
                                                                class="slds-text-link">{record.name}</a>
                                                        </td>
                                                        <template for:each={record.fieldValues} for:item="fieldValue">
                                                            <td key={fieldValue} class="truncate-cell"
                                                                title={fieldValue}>
                                                                {fieldValue}</td>
                                                        </template>
                                                        <td style="text-align: -webkit-center;">
                                                            <lightning-icon icon-name="utility:preview" size="xx-small"
                                                                alternative-text="See Details" title="See Details"
                                                                data-index={recordIndex} data-objectindex={objectIndex}
                                                                onclick={handlePrintRecord}>
                                                            </lightning-icon>
                                                        </td>
                                                    </tr>
                                                </template>
                                            </tbody>
                                        </table>
                                    </div>
                                </template>

                                <template if:false={objectData.records.length}>
                                    <div class="no-records-container">
                                        <div class="slds-illustration slds-illustration_small">
                                            <div class="slds-text-longform">
                                                <h3 class="slds-text-heading_medium">No Records Found</h3>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </div>
                        <footer
                            class="slds-card__footer slds-grid slds-wrap slds-p-around_medium slds-grid_align-spread">
                            <div class="slds-text-body_small slds-text-color_weak">
                                <template if:true={objectData.records.length}>
                                    Showing <span>{objectData.resultStats.start}&nbsp;</span>
                                    to <span>{objectData.resultStats.end}&nbsp;</span>
                                    of <span>{objectData.resultStats.total}&nbsp;</span> results
                                </template>
                            </div>
                            <div>
                                <div class="slds-button-group" role="group">
                                    <button
                                        class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small"
                                        disabled={objectData.isPrevDisabled} title="Previous">
                                        <lightning-icon icon-name="utility:chevronleft" onclick={handlePrevPage}
                                            data-objectname={objectData.objectName} alternative-text="Previous"
                                            size="xx-small"></lightning-icon>
                                    </button>
                                    <span style="margin: 0 0.5rem;">{objectData.currentPage} /
                                        {objectData.totalPages}</span>
                                    <button
                                        class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small"
                                        disabled={objectData.isNextDisabled} title="Next">
                                        <lightning-icon icon-name="utility:chevronright" onclick={handleNextPage}
                                            data-objectname={objectData.objectName} alternative-text="Next"
                                            size="xx-small"></lightning-icon>
                                    </button>
                                </div>
                            </div>
                        </footer>
                    </div>
                </div>
            </template>
            <div
                class="slds-col slds-size_1-of-1 slds-small-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3 slds-p-around_xx-small">
                <c-apm-my-assessment style="height:100%"></c-apm-my-assessment>
            </div>
        </div>
    </template>
    <template if:true={error}>
        <p class="slds-text-color_error">Error: {error.body.message}</p>
    </template>

    <template if:true={showmodal}>
        <section role="dialog" tabindex="-1" aria-modal="true" aria-labelledby="modal-heading-01"
            class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <div class="slds-modal__header">
                    <h1 id="modal-heading-01" class="slds-modal__title slds-hyphenate" tabindex="-1">Related
                        Records/Actions</h1>
                </div>
                <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                    <div class="slds-form-element">
                        <div class="slds-form-element__control">

                            <template if:true={related.length}>
                                <lightning-accordion allow-multiple-sections-open>
                                    <template for:each={related} for:item="objectData">
                                        <lightning-accordion-section key={objectData.objectName}
                                            name={objectData.objectName} label={objectData.objectLabel}>
                                            <div class="slds-grid slds-wrap">
                                                <template if:true={objectData.records.length}>
                                                    <template for:each={objectData.records} for:item="record">
                                                        <div key={record.recordUrl}
                                                            class="slds-col slds-size_1-of-1 slds-small-size_1-of-2 slds-medium-size_1-of-2">
                                                            <a href={record.recordUrl} target="_blank"
                                                                class="modalrecordcard slds-box slds-box_x-small slds-m-around_x-small slds-text-link_reset"
                                                                style="display:block; text-decoration:none;">
                                                                <div>
                                                                    <template for:each={record.displayFields}
                                                                        for:item="field">
                                                                        <div key={field.label}
                                                                            class="slds-m-vertical_xx-small">
                                                                            <span style="font-weight:600"
                                                                                class="slds-text-title">{field.label} :
                                                                            </span>
                                                                            <span>{field.value}</span>
                                                                        </div>
                                                                    </template>
                                                                </div>
                                                            </a>
                                                        </div>
                                                    </template>
                                                </template>
                                                <template if:false={objectData.records.length}>
                                                    <p>No Records Found</p>
                                                </template>
                                            </div>
                                        </lightning-accordion-section>
                                    </template>
                                </lightning-accordion>
                            </template>
                            <template if:false={related.length}>
                                <p>No Records Found</p>
                            </template>

                            <template if:true={error}>
                                <p>Error: {error.body.message}</p>
                            </template>
                        </div>
                    </div>
                </div>
                <div class="slds-modal__footer">
                    <button style="color: color-mix(in srgb, var(--slds-g-color-accent-2) 70%,transparent);"
                        onclick={handlemodalclose} class="slds-button slds-button_neutral"
                        aria-label="Cancel and close">Cancel</button>
                </div>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open" role="presentation"></div>
    </template>

</template> */}

// ----------------------JS---------------------------------//
// import { LightningElement, track } from 'lwc';
// import getRelatedObjectsAndRecords from '@salesforce/apex/APM_apLWC_MyRecordsController.getRelatedObjectsAndRecords';
// import getRelated from '@salesforce/apex/APM_apLWC_MyRecordsController.getAllRelatedRecords';
// import getRelatedParent from '@salesforce/apex/APM_apLWC_MyRecordsController.getParentRecords';

// const PAGE_SIZE = 10;

// function formatLabel(apiName) {
//     // Remove '__c', '__mdt', and '__r' suffixes, then replace underscores with spaces
//     return apiName.replace(/__c$|__mdt$|__r$/i, '').replace(/_/g, ' ');
// }

// function getFieldLabel(fieldName) {
//     // Use the part before the dot if present, then format
//     const namePart = fieldName.includes('.') ? fieldName.split('.')[0] : fieldName;
//     return formatLabel(namePart);
// }



// export default class ApmMyRecords extends LightningElement {
//    @track relatedData = [];
//    @track pages = {};
//     @track related = [];
//     @track error;
//     @track showmodal = false;

//     connectedCallback() {
//         this.fetchRelatedData();
//     }

//     fetchRelatedData() {
//         getRelatedObjectsAndRecords()
//             .then((data) => {
//                 this.relatedData = Object.entries(data).map(([objectName, value]) => ({
//                     objectName: objectName,
//                     objectLabel: formatLabel(objectName),
//                     fields: value.fields
//                         .filter(field => field !== 'Id' && field !== 'Name')
//                         .map(field => ({
//                             apiName: field,
//                             label: getFieldLabel(field)
//                         })),
//                     records: value.records.map(rec => ({
//                         name: rec.Name,
//                         recordUrl: '/' + rec.Id,
//                         raw: rec, // Store the full record for logging
//                         fieldValues: value.fields
//                             .filter(field => field !== 'Id' && field !== 'Name')
//                             .map(fieldName => rec[fieldName] || 'N/A')
//                     }))
//                 }));
//                 this.pages = {};
//                 this.relatedData.forEach(obj => {
//                     this.pages[obj.objectName] = 1;
//                 });
//                 this.error = undefined;
//             })
//             .catch((error) => {
//                 this.error = error;
//                 this.relatedData = [];
//             });
//     }

//     get pagedObjects() {
//         return this.relatedData.map(obj => {
//             const page = this.pages[obj.objectName] || 1;
//             const start = (page - 1) * PAGE_SIZE;
//             const totalPages = Math.max(1, Math.ceil(obj.records.length / PAGE_SIZE));
//             return {
//                 ...obj,
//                 currentPage: page,
//                 pageRecords: obj.records.slice(start, start + PAGE_SIZE),
//                 totalPages,
//                 isPrevDisabled: page === 1,
//                 isNextDisabled: page === totalPages,
//                 resultStats: {
//                     start: obj.records.length ? start + 1 : 0,
//                     end: Math.min(page * PAGE_SIZE, obj.records.length),
//                     total: obj.records.length
//                 }
//             };
//         });
//     }

//     handlePrevPage(event) {
//         const objectName = event.target.dataset.objectname;
//         const page = this.pages[objectName] || 1;
//         if (page > 1) {
//             this.pages = { ...this.pages, [objectName]: page - 1 };
//         }
//     }

//     handleNextPage(event) {
//         const objectName = event.target.dataset.objectname;
//         const obj = this.relatedData.find(o => o.objectName === objectName);
//         const totalPages = Math.max(1, Math.ceil(obj.records.length / PAGE_SIZE));
//         const page = this.pages[objectName] || 1;
//         if (page < totalPages) {
//             this.pages = { ...this.pages, [objectName]: page + 1 };
//         }
//     }

//     handlePrintRecord(event) {
//         const recordIndex = event.target.dataset.index;
//         const objectIndex = event.target.dataset.objectindex;
//         const record = this.relatedData[objectIndex].records[recordIndex];

//         let id = '';
//         if (record.recordUrl) {
//             id = record.recordUrl.replace('/', '');
//         } else if (record.raw && record.raw.Id) {
//             id = record.raw.Id;
//         }

//         // Fetch both related records and parent records
//         Promise.all([
//             getRelated({ recordId: id }),
//             getRelatedParent({ childRecordId: id })
//         ])
//             .then(([relatedData, parentData]) => {

//                 // Utility function to process data objects (relatedData or parentData)
//                 function processData(data) {
//                     return Object.entries(data).map(([objectName, value]) => ({
//                         objectName: objectName,
//                         objectLabel: formatLabel(objectName),
//                         fields: value.fields
//                             .filter(field => field !== 'Id' && field !== 'Name')
//                             .map(field => ({
//                                 apiName: field,
//                                 label: formatLabel(field)
//                             })),
//                         records: value.records.map(rec => ({
//                             name: rec.Name,
//                             recordUrl: '/' + rec.Id,
//                             displayFields: value.fields
//                                 .filter(field => field !== 'Id' && field !== 'Name')
//                                 .map(fieldName => ({
//                                     label: getFieldLabel(fieldName),
//                                     value: rec[fieldName] || 'N/A'
//                                 }))
//                         }))
//                     }));
//                 }

//                 // Usage:
//                 const processedRelatedData = processData(relatedData);
//                 const processedParentData = processData(parentData);
//                 // Combine related and parent records into a single list
//                 this.related = [...processedRelatedData, ...processedParentData];
//                 this.error = undefined;
//             })
//             .catch((error) => {
//                 this.error = error;
//                 this.related = [];
//             });

//         this.showmodal = true;
//     }

//     handlemodalclose() {
//         this.related = [];
//         this.showmodal = false;
//     }
// }
