import { createElement } from 'lwc';
import ApmMyAssessment from 'c/apmMyAssessment';
import getPendingApplications from '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments';

// ✅ Mock Apex
jest.mock(
    '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments',
    () => ({
        default: jest.fn()
    }),
    { virtual: true }
);

// ✅ Mock Custom Label
jest.mock(
    '@salesforce/label/c.APM_Attestation_Link',
    () => 'https://assessment-link.com',
    { virtual: true }
);

describe('c-apm-my-assessment', () => {
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    it('renders exactly 8 rows on first page', async () => {
        const mockData = Array.from({ length: 10 }, (_, i) => ({
            Id: `app${i + 1}`,
            APM_Name__c: `App ${i + 1}`,
            DueDate__c: `2025-06-${10 + i}`,
            APM_Assessment_Status__c: 'Pending'
        }));

        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);

        await Promise.resolve();
        await Promise.resolve();

        const rows = element.shadowRoot.querySelectorAll('tbody tr');
        expect(rows.length).toBe(8);
    });

    it('renders "No Records Found" when Apex fails', async () => {
        getPendingApplications.mockRejectedValue(new Error('Apex error'));

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);

        await Promise.resolve();
        await Promise.resolve();

        const emptyMsg = element.shadowRoot.querySelector('.slds-text-heading_medium');
        expect(emptyMsg).not.toBeNull();
        expect(emptyMsg.textContent).toBe('No Records Found');
    });

    it('opens window when Take Assessment is clicked', async () => {
        const mockData = [{
            Id: '001XYZ',
            APM_Name__c: 'Test App',
            DueDate__c: '2025-06-20',
            APM_Assessment_Status__c: 'Pending'
        }];

        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);

        await Promise.resolve();
        await Promise.resolve();

        const openSpy = jest.spyOn(window, 'open').mockImplementation(() => { });

        const button = element.shadowRoot.querySelector('button[data-id="001XYZ"]');
        expect(button).not.toBeNull();
        button.click();

        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('https://assessment-link.com'),
            '_blank'
        );
        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('c__ContextId=001XYZ'),
            '_blank'
        );

        openSpy.mockRestore();
    });

    it('goes to page 2 and renders 2 rows, then returns to 8 on page 1', async () => {
        const mockData = Array.from({ length: 10 }, (_, i) => ({
            Id: `app${i + 1}`,
            APM_Name__c: `App ${i + 1}`,
            DueDate__c: `2025-06-${10 + i}`,
            APM_Assessment_Status__c: 'Pending'
        }));

        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);

        await Promise.resolve();
        await Promise.resolve();

        const nextBtn = element.shadowRoot.querySelector('button[title="Next"]');
        expect(nextBtn).not.toBeNull();

        nextBtn.click();
        await Promise.resolve();
        await Promise.resolve();

        let rows = element.shadowRoot.querySelectorAll('tbody tr');
        expect(rows.length).toBe(2); // Second page

        const prevBtn = element.shadowRoot.querySelector('button[title="Previous"]');
        prevBtn.click();
        await Promise.resolve();
        await Promise.resolve();

        rows = element.shadowRoot.querySelectorAll('tbody tr');
        expect(rows.length).toBe(8); // Back to first page
    });
});
