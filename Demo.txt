public with sharing class RelatedObjectsController {

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getRelatedObjectsAndRecords() {
        Map<String, Object> relatedData = new Map<String, Object>();
        Id currentUserId = UserInfo.getUserId();

        for (Home_Page_Objects_Configuratiom__mdt objmtd : getHomePageObjectMetadata()) {
            if (!isValidObjectConfig(objmtd.Object__c, objmtd.Fields__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            if (fieldList.size() <= 2) {
                continue;
            }

            String soql = buildSOQL(objmtd.Object__c, fieldList, objmtd.Subscriber__c, currentUserId);
            List<SObject> records = safeQuery(soql);

            if (records == null) {
                continue;
            }

            relatedData.put(objmtd.MasterLabel, wrapRecordData(fieldList, flattenRecords(records, fieldList)));
        }

        return relatedData;
    }

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getAllRelatedRecords(Id recordId) {
        if (recordId == null) {
            throw new AuraHandledException('Record Id is required.');
        }

        Map<String, Object> relatedData = new Map<String, Object>();
        String objectName = recordId.getSObjectType().getDescribe().getName();

        for (RelatedObject__mdt objmtd : getRelatedObjectMetadata(objectName)) {
            if (!isValidObjectConfig(objmtd.RelatedObject__c, objmtd.Fields__c, objmtd.Lookup__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            ensureIdField(fieldList);

            String soql = 'SELECT ' + String.join(fieldList, ', ') +
                          ' FROM ' + String.escapeSingleQuotes(objmtd.RelatedObject__c) +
                          ' WHERE ' + String.escapeSingleQuotes(objmtd.Lookup__c) + ' = :recordId LIMIT 10';

            List<SObject> records = safeQuery(soql);
            if (records == null) {
                continue;
            }

            relatedData.put(objmtd.RelatedObject__c, wrapRecordData(fieldList, flattenRecords(records, fieldList)));
        }

        return relatedData;
    }

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getParentRecords(Id childRecordId) {
        if (childRecordId == null) {
            throw new AuraHandledException('Child Record Id is required.');
        }

        Map<String, Object> parentData = new Map<String, Object>();
        String childObjectName = childRecordId.getSObjectType().getDescribe().getName();

        for (RelatedParentObject__mdt objmtd : getParentObjectMetadata(childObjectName)) {
            if (!isValidObjectConfig(objmtd.RelatedObject__c, objmtd.Fields__c, objmtd.Lookup__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            ensureIdField(fieldList);

            Id parentRecordId = getParentRecordId(childObjectName, objmtd.Lookup__c, childRecordId);
            if (parentRecordId == null) {
                continue;
            }

            String soql = 'SELECT ' + String.join(fieldList, ', ') +
                          ' FROM ' + String.escapeSingleQuotes(objmtd.RelatedObject__c) +
                          ' WHERE Id = :parentRecordId';

            List<SObject> parentRecords = safeQuery(soql);
            if (parentRecords == null) {
                continue;
            }

            parentData.put(objmtd.RelatedObject__c, wrapRecordData(fieldList, flattenRecords(parentRecords, fieldList)));
        }

        return parentData;
    }

    // ===== Helper Methods =====

    private static List<Home_Page_Objects_Configuratiom__mdt> getHomePageObjectMetadata() {
        return [SELECT Fields__c, MasterLabel, Object__c, Subscriber__c 
                FROM Home_Page_Objects_Configuratiom__mdt LIMIT 10];
    }

    private static List<RelatedObject__mdt> getRelatedObjectMetadata(String objectName) {
        return [SELECT RelatedObject__c, Fields__c, Lookup__c, MasterLabel
                FROM RelatedObject__mdt WHERE MasterLabel = :objectName];
    }

    private static List<RelatedParentObject__mdt> getParentObjectMetadata(String childObjectName) {
        return [SELECT MasterLabel, Fields__c, RelatedObject__c, Lookup__c
                FROM RelatedParentObject__mdt WHERE MasterLabel = :childObjectName];
    }

    private static Boolean isValidObjectConfig(String obj, String fields, String lookupField) {
        return !String.isBlank(obj) && !String.isBlank(fields) && !String.isBlank(lookupField);
    }

    private static Boolean isValidObjectConfig(String obj, String fields) {
        return !String.isBlank(obj) && !String.isBlank(fields);
    }

    private static void ensureIdField(List<String> fieldList) {
        if (!fieldList.contains('Id')) {
            fieldList.add(0, 'Id');
        }
    }

    private static Map<String, Object> wrapRecordData(List<String> fieldList, List<Map<String, Object>> records) {
        return new Map<String, Object>{
            'fields' => fieldList,
            'records' => records
        };
    }

    private static List<String> parseFields(String fieldsStr) {
        List<String> fieldList = new List<String>();
        for (String field : fieldsStr.split(',')) {
            String trimmed = field.trim();
            if (!String.isBlank(trimmed) && !fieldList.contains(trimmed)) {
                fieldList.add(trimmed);
            }
        }
        return fieldList;
    }

    private static String buildSOQL(String objectName, List<String> fieldList, String subscriberField, Id userId) {
        String baseQuery = 'SELECT ' + String.join(fieldList, ', ') + ' FROM ' + String.escapeSingleQuotes(objectName);
        String whereClause = String.isNotBlank(subscriberField)
            ? subscriberField + ' = :userId'
            : 'OwnerId = :userId';
        return baseQuery + ' WHERE ' + whereClause + ' LIMIT 10';
    }

    private static List<SObject> safeQuery(String soql) {
        try {
            return Database.query(soql);
        } catch (Exception e) {
            System.debug('SOQL Error: ' + e.getMessage());
            return null;
        }
    }

    private static Id getParentRecordId(String childObjectName, String lookupField, Id childRecordId) {
        try {
            String soql = 'SELECT ' + String.escapeSingleQuotes(lookupField) +
                          ' FROM ' + String.escapeSingleQuotes(childObjectName) +
                          ' WHERE Id = :childRecordId';
            List<SObject> childRecords = Database.query(soql);

            if (!childRecords.isEmpty()) {
                return (Id) childRecords[0].get(lookupField);
            } else {
                return null;
            }
        } catch (Exception e) {
            System.debug('Parent Lookup Error: ' + e.getMessage());
            return null;
        }
    }

    private static List<Map<String, Object>> flattenRecords(List<SObject> records, List<String> fieldList) {
        List<Map<String, Object>> flatRecords = new List<Map<String, Object>>();

        for (SObject record : records) {
            Map<String, Object> flat = new Map<String, Object>();

            for (String field : fieldList) {
                flat.put(field, getFieldValue(record, field));
            }

            flatRecords.add(flat);
        }

        return flatRecords;
    }

    private static Object getFieldValue(SObject record, String field) {
        if (field.contains('.')) {
            List<String> parts = field.split('\\.');
            SObject rel = record;

            for (Integer i = 0; i < parts.size() - 1; i++) {
                if (rel != null) {
                    rel = rel.getSObject(parts[i]);
                }
            }

            if (rel != null) {
                return rel.get(parts[parts.size() - 1]);
            } else {
                return null;
            }
        } else {
            return record.get(field);
        }
    }
}
