public class RelatedRecordsFetcher {

    public class InputWrapper {
        @InvocableVariable(label='Record Id')
        public Id recordId;

        @InvocableVariable(label='Object Name')
        public String objectName;
    }

    public class OutputWrapper {
        @InvocableVariable(label='Related Records Summary')
        public String summary;
    }

    @InvocableMethod(label='Fetch Related Parent & Child Records')
    public static List<OutputWrapper> fetchRelatedRecords(List<InputWrapper> inputs) {
        List<OutputWrapper> result = new List<OutputWrapper>();

        for (InputWrapper input : inputs) {
            String objectName = input.objectName;
            Id recordId = input.recordId;
            String output = '';

            // Fetch metadata for this object
            List<Your_Metadata__mdt> metadataList = [
                SELECT Object__c, ParentObjects__c, ChildObjects__c
                FROM Your_Metadata__mdt
                WHERE Object__c = :objectName
                LIMIT 1
            ];

            if (metadataList.isEmpty()) {
                result.add(new OutputWrapper(summary = 'No metadata found for object: ' + objectName));
                continue;
            }

            Your_Metadata__mdt metadata = metadataList[0];

            // Parse parents and children
            List<String> parentObjects = metadata.ParentObjects__c != null ?
                metadata.ParentObjects__c.split(',') : new List<String>();
            List<String> childObjects = metadata.ChildObjects__c != null ?
                metadata.ChildObjects__c.split(',') : new List<String>();

            output += 'Related Parent Records:\n';
            for (String parentObj : parentObjects) {
                parentObj = parentObj.trim();
                try {
                    String query = 'SELECT Id FROM ' + parentObj + ' WHERE ' + objectName + 'Id = :recordId';
                    List<SObject> records = Database.query(query);
                    output += '- ' + parentObj + ' (' + records.size() + ')\n';
                } catch (Exception e) {
                    output += '- ' + parentObj + ' (Error: ' + e.getMessage() + ')\n';
                }
            }

            output += '\nRelated Child Records:\n';
            for (String childObj : childObjects) {
                childObj = childObj.trim();
                try {
                    String query = 'SELECT Id FROM ' + childObj + ' WHERE ' + objectName + 'Id = :recordId';
                    List<SObject> records = Database.query(query);
                    output += '- ' + childObj + ' (' + records.size() + ')\n';
                } catch (Exception e) {
                    output += '- ' + childObj + ' (Error: ' + e.getMessage() + ')\n';
                }
            }

            result.add(new OutputWrapper(summary = output));
        }

        return result;
    }
}
