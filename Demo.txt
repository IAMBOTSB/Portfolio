import { LightningElement, track } from 'lwc';
import getRelatedObjectsAndRecords from '@salesforce/apex/RelatedObjectsController.getRelatedObjectsAndRecords';
import getRelated from '@salesforce/apex/RelatedObjectsController.getAllRelatedRecords';
import getRelatedParent from '@salesforce/apex/RelatedObjectsController.getParentRecords';

const PAGE_SIZE = 5;

function formatLabel(apiName) {
    return apiName.replace(/__c$|__mdt$|__r$/i, '').replace(/_/g, ' ');
}

function getFieldLabel(fieldName) {
    const namePart = fieldName.includes('.') ? fieldName.split('.')[0] : fieldName;
    return formatLabel(namePart);
}

export default class RelatedObjectsToOwner extends LightningElement {
    @track relatedData = [];
    @track related = [];
    @track error;
    @track showmodal = false;

    connectedCallback() {
        this.fetchRelatedData();
    }

    fetchRelatedData() {
        getRelatedObjectsAndRecords()
            .then((data) => {
                this.relatedData = Object.entries(data).map(([objectName, value]) => ({
                    objectName: objectName,
                    objectLabel: formatLabel(objectName),
                    fields: value.fields
                        .filter(field => field !== 'Id' && field !== 'Name')
                        .map(field => ({
                            apiName: field,
                            label: getFieldLabel(field)
                        })),
                    allRecords: value.records.map(rec => ({
                        name: rec.Name,
                        recordUrl: '/' + rec.Id,
                        raw: rec,
                        fieldValues: value.fields
                            .filter(field => field !== 'Id' && field !== 'Name')
                            .map(fieldName => rec[fieldName] || 'N/A')
                    })),
                    page: 1
                }));
                this.error = undefined;
            })
            .catch((error) => {
                this.error = error;
                this.relatedData = [];
            });
    }

    getPagedRecords(objectData) {
        const start = (objectData.page - 1) * PAGE_SIZE;
        return objectData.allRecords.slice(start, start + PAGE_SIZE);
    }

    getTotalPages(obj) {
        return Math.ceil(obj.allRecords.length / PAGE_SIZE);
    }

    handlePrev(event) {
        const index = event.target.dataset.objectindex;
        if (this.relatedData[index].page > 1) {
            this.relatedData[index].page -= 1;
            this.relatedData = [...this.relatedData];
        }
    }

    handleNext(event) {
        const index = event.target.dataset.objectindex;
        const totalPages = this.getTotalPages(this.relatedData[index]);
        if (this.relatedData[index].page < totalPages) {
            this.relatedData[index].page += 1;
            this.relatedData = [...this.relatedData];
        }
    }

    handlePrintRecord(event) {
        const recordIndex = event.target.dataset.index;
        const objectIndex = event.target.dataset.objectindex;
        const record = this.relatedData[objectIndex].allRecords[recordIndex];

        let id = '';
        if (record.recordUrl) {
            id = record.recordUrl.replace('/', '');
        } else if (record.raw && record.raw.Id) {
            id = record.raw.Id;
        }

        Promise.all([
            getRelated({ recordId: id }),
            getRelatedParent({ childRecordId: id })
        ])
            .then(([relatedData, parentData]) => {
                const processData = (data) =>
                    Object.entries(data).map(([objectName, value]) => ({
                        objectName: objectName,
                        objectLabel: formatLabel(objectName),
                        fields: value.fields
                            .filter(field => field !== 'Id' && field !== 'Name')
                            .map(field => ({
                                apiName: field,
                                label: formatLabel(field)
                            })),
                        records: value.records.map(rec => ({
                            name: rec.Name,
                            recordUrl: '/' + rec.Id,
                            displayFields: value.fields
                                .filter(field => field !== 'Id' && field !== 'Name')
                                .map(fieldName => ({
                                    label: getFieldLabel(fieldName),
                                    value: rec[fieldName] || 'N/A'
                                }))
                        }))
                    }));

                this.related = [...processData(relatedData), ...processData(parentData)];
                this.error = undefined;
            })
            .catch((error) => {
                this.error = error;
                this.related = [];
            });

        this.showmodal = true;
    }

    handlemodalclose() {
        this.related = [];
        this.showmodal = false;
    }
}
