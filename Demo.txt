public class RelatedRecordsFetcher {

    public class InputWrapper {
        @InvocableVariable(label='Record Id')
        public Id recordId;

        @InvocableVariable(label='Object Name')
        public String objectName;
    }

    public class OutputWrapper {
        @InvocableVariable(label='Related Records Summary')
        public String summary;
    }

    @InvocableMethod(label='Fetch Related Parent & Child Records')
    public static List<OutputWrapper> fetchRelatedRecords(List<InputWrapper> inputs) {
        List<OutputWrapper> result = new List<OutputWrapper>();

        for (InputWrapper input : inputs) {
            String objectName = input.objectName;
            Id recordId = input.recordId;
            String output = '';

            // Get the metadata config
            List<Your_Metadata__mdt> metadataList = [
                SELECT Object__c, ParentObjects__c, ChildObjects__c
                FROM Your_Metadata__mdt
                WHERE Object__c = :objectName
                LIMIT 1
            ];

            if (metadataList.isEmpty()) {
                OutputWrapper out = new OutputWrapper();
                out.summary = 'No metadata found for object: ' + objectName;
                result.add(out);
                continue;
            }

            Your_Metadata__mdt metadata = metadataList[0];
            List<String> parentObjects = metadata.ParentObjects__c?.split(',') ?: new List<String>();
            List<String> childObjects = metadata.ChildObjects__c?.split(',') ?: new List<String>();

            // Get current record (needed to get lookup values)
            SObject currentRecord;
            try {
                currentRecord = Database.query('SELECT Id FROM ' + objectName + ' WHERE Id = :recordId LIMIT 1');
            } catch (Exception ex) {
                OutputWrapper out = new OutputWrapper();
                out.summary = 'Error fetching record of object: ' + objectName;
                result.add(out);
                continue;
            }

            // --- Parent Records ---
            output += 'Related Parent Records:\n';
            Map<String, Schema.SObjectField> currentFields = Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap();

            for (String parentObject : parentObjects) {
                parentObject = parentObject.trim();
                Boolean found = false;

                for (String fieldName : currentFields.keySet()) {
                    Schema.DescribeFieldResult describeField = currentFields.get(fieldName).getDescribe();
                    if (describeField.getType() == Schema.DisplayType.REFERENCE &&
                        describeField.getReferenceTo().contains(parentObject)) {
                        try {
                            Object refId = currentRecord.get(fieldName);
                            if (refId != null) {
                                List<SObject> parentRecs = Database.query('SELECT Id FROM ' + parentObject + ' WHERE Id = :refId');
                                output += '- ' + parentObject + ' (' + parentRecs.size() + ')\n';
                            } else {
                                output += '- ' + parentObject + ' (No related record)\n';
                            }
                        } catch (Exception e) {
                            output += '- ' + parentObject + ' (Error: ' + e.getMessage() + ')\n';
                        }
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    output += '- ' + parentObject + ' (No reference field found on ' + objectName + ')\n';
                }
            }

            // --- Child Records ---
            output += '\nRelated Child Records:\n';

            for (String childObject : childObjects) {
                childObject = childObject.trim();
                Boolean found = false;

                Schema.SObjectType childType = Schema.getGlobalDescribe().get(childObject);
                if (childType == null) {
                    output += '- ' + childObject + ' (Invalid object)\n';
                    continue;
                }

                Map<String, Schema.SObjectField> childFields = childType.getDescribe().fields.getMap();

                for (String fieldName : childFields.keySet()) {
                    Schema.DescribeFieldResult describeField = childFields.get(fieldName).getDescribe();
                    if (describeField.getType() == Schema.DisplayType.REFERENCE &&
                        describeField.getReferenceTo().contains(objectName)) {
                        try {
                            String query = 'SELECT Id FROM ' + childObject + ' WHERE ' + fieldName + ' = :recordId';
                            List<SObject> childRecs = Database.query(query);
                            output += '- ' + childObject + ' (' + childRecs.size() + ')\n';
                        } catch (Exception e) {
                            output += '- ' + childObject + ' (Error: ' + e.getMessage() + ')\n';
                        }
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    output += '- ' + childObject + ' (No lookup field found referring to ' + objectName + ')\n';
                }
            }

            OutputWrapper wrap = new OutputWrapper();
            wrap.summary = output;
            result.add(wrap);
        }

        return result;
    }
}
