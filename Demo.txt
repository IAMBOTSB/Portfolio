public with sharing class RelatedObjectsController {

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getRelatedObjectsAndRecords() {
        Map<String, Object> relatedData = new Map<String, Object>();
        Integer numberOfObjects = 10;
        Id currentUserId = UserInfo.getUserId();

        List<Home_Page_Objects_Configuratiom__mdt> objectsMeta = [
            SELECT Fields__c, MasterLabel, Object__c, Subscriber__c 
            FROM Home_Page_Objects_Configuratiom__mdt 
            LIMIT :numberOfObjects
        ];

        for (Home_Page_Objects_Configuratiom__mdt objmtd : objectsMeta) {
            if (String.isBlank(objmtd.Object__c) || String.isBlank(objmtd.Fields__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            if (fieldList.size() <= 2) {
                continue;
            }

            String soql = buildSOQL(objmtd.Object__c, fieldList, objmtd.Subscriber__c, currentUserId);
            try {
                List<SObject> records = Database.query(soql);
                if (records.isEmpty()) {
                    continue;
                }

                List<Map<String, Object>> flatRecords = flattenRecords(records, fieldList);
                Map<String, Object> objectData = wrapRecordData(fieldList, flatRecords);
                relatedData.put(objmtd.MasterLabel, objectData);
            } catch (Exception e) {
                System.debug('Error querying object: ' + objmtd.Object__c + ' - ' + e.getMessage());
            }
        }

        return relatedData;
    }

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getAllRelatedRecords(Id recordId) {
        if (recordId == null) {
            throw new AuraHandledException('Record Id is required.');
        }

        Map<String, Object> relatedData = new Map<String, Object>();
        String objectName = recordId.getSObjectType().getDescribe().getName();

        List<RelatedObject__mdt> objectsMeta = [
            SELECT RelatedObject__c, Fields__c, Lookup__c, MasterLabel
            FROM RelatedObject__mdt
            WHERE MasterLabel = :objectName
        ];

        for (RelatedObject__mdt objmtd : objectsMeta) {
            if (!isValidObjectConfig(objmtd.RelatedObject__c, objmtd.Fields__c, objmtd.Lookup__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            ensureIdField(fieldList);

            String soql = 'SELECT ' + String.join(fieldList, ', ') +
                          ' FROM ' + objmtd.RelatedObject__c +
                          ' WHERE ' + objmtd.Lookup__c + ' = :recordId LIMIT 10';

            try {
                List<SObject> records = Database.query(soql);
                if (records.isEmpty()) {
                    continue;
                }

                List<Map<String, Object>> flatRecords = flattenRecords(records, fieldList);
                relatedData.put(objmtd.RelatedObject__c, wrapRecordData(fieldList, flatRecords));
            } catch (Exception e) {
                System.debug('Error querying related object: ' + objmtd.RelatedObject__c + ' - ' + e.getMessage());
            }
        }

        return relatedData;
    }

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getParentRecords(Id childRecordId) {
        if (childRecordId == null) {
            throw new AuraHandledException('Child Record Id is required.');
        }

        Map<String, Object> parentData = new Map<String, Object>();
        String childObjectName = childRecordId.getSObjectType().getDescribe().getName();

        List<RelatedParentObject__mdt> objectsMeta = [
            SELECT MasterLabel, Fields__c, RelatedObject__c, Lookup__c
            FROM RelatedParentObject__mdt
            WHERE MasterLabel = :childObjectName
        ];

        for (RelatedParentObject__mdt objmtd : objectsMeta) {
            if (!isValidObjectConfig(objmtd.RelatedObject__c, objmtd.Fields__c, objmtd.Lookup__c)) {
                continue;
            }

            List<String> fieldList = parseFields(objmtd.Fields__c);
            ensureIdField(fieldList);

            try {
                String childQuery = 'SELECT ' + objmtd.Lookup__c + ' FROM ' + childObjectName + ' WHERE Id = :childRecordId';
                List<SObject> childRecords = Database.query(childQuery);
                if (childRecords.isEmpty()) {
                    continue;
                }

                Id parentRecordId = (Id)childRecords[0].get(objmtd.Lookup__c);
                if (parentRecordId == null) {
                    continue;
                }

                String parentQuery = 'SELECT ' + String.join(fieldList, ', ') +
                                     ' FROM ' + objmtd.RelatedObject__c +
                                     ' WHERE Id = :parentRecordId';

                List<SObject> parentRecords = Database.query(parentQuery);
                if (parentRecords.isEmpty()) {
                    continue;
                }

                List<Map<String, Object>> flatRecords = flattenRecords(parentRecords, fieldList);
                parentData.put(objmtd.RelatedObject__c, wrapRecordData(fieldList, flatRecords));
            } catch (Exception e) {
                System.debug('Error querying parent object: ' + objmtd.RelatedObject__c + ' - ' + e.getMessage());
            }
        }

        return parentData;
    }

    // ------------------------- Helper Methods ----------------------------

    private static List<String> parseFields(String fieldsStr) {
        List<String> fieldList = new List<String>();
        for (String field : fieldsStr.split(',')) {
            String trimmed = field.trim();
            if (!String.isBlank(trimmed) && !fieldList.contains(trimmed)) {
                fieldList.add(trimmed);
            }
        }
        return fieldList;
    }

    private static Boolean isValidObjectConfig(String objectName, String fields, String lookup) {
        return !String.isBlank(objectName) && !String.isBlank(fields) && !String.isBlank(lookup);
    }

    private static void ensureIdField(List<String> fieldList) {
        if (!fieldList.contains('Id')) {
            fieldList.add(0, 'Id');
        }
    }

    private static String buildSOQL(String objectName, List<String> fieldList, String subscriberField, Id userId) {
        String baseQuery = 'SELECT ' + String.join(fieldList, ', ') +
                           ' FROM ' + objectName +
                           ' WHERE ';
        if (String.isNotBlank(subscriberField)) {
            baseQuery += subscriberField + ' = :userId';
        } else {
            baseQuery += 'OwnerId = :userId';
        }
        return baseQuery + ' LIMIT 10';
    }

    private static Map<String, Object> wrapRecordData(List<String> fieldList, List<Map<String, Object>> records) {
        Map<String, Object> objectData = new Map<String, Object>();
        objectData.put('fields', fieldList);
        objectData.put('records', records);
        return objectData;
    }

    private static List<Map<String, Object>> flattenRecords(List<SObject> records, List<String> fieldList) {
        List<Map<String, Object>> flatRecords = new List<Map<String, Object>>();

        for (SObject record : records) {
            Map<String, Object> flatRecord = new Map<String, Object>();

            for (String field : fieldList) {
                if (field.contains('.')) {
                    List<String> parts = field.split('\\.');
                    SObject relObj = record;
                    for (Integer i = 0; i < parts.size() - 1; i++) {
                        relObj = relObj.getSObject(parts[i]);
                        if (relObj == null) {
                            break;
                        }
                    }
                    Object value = relObj != null ? relObj.get(parts[parts.size() - 1]) : null;
                    flatRecord.put(field, value);
                } else {
                    flatRecord.put(field, record.get(field));
                }
            }

            flatRecords.add(flatRecord);
        }

        return flatRecords;
    }
}
