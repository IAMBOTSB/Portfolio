import { createElement } from 'lwc';
import ApmMyAssessment from 'c/apmMyAssessment';
import getPendingApplications from '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments';

// ✅ Mock Apex
jest.mock(
    '@salesforce/apex/APM_apLWC_MyAssessmentController.getPendingAssessments',
    () => ({
        default: jest.fn()
    }),
    { virtual: true }
);

// ✅ Mock custom label
jest.mock(
    '@salesforce/label/c.APM_Attestation_Link',
    () => 'https://assessment-link.com',
    { virtual: true }
);

describe('c-apm-my-assessment', () => {
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    it('renders first 8 applications in the DOM', async () => {
        const mockData = Array.from({ length: 10 }, (_, i) => ({
            Id: `app${i + 1}`,
            Name: `App ${i + 1}`
        }));

        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });

        document.body.appendChild(element);
        await Promise.resolve();
        await Promise.resolve();

        // Adjust based on your actual tag: 'button' or 'lightning-button'
        const rendered = element.shadowRoot.querySelectorAll('button[data-id]');
        expect(rendered.length).toBe(8);
    });

    it('handles Apex error and shows nothing', async () => {
        getPendingApplications.mockRejectedValue(new Error('Apex failure'));

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });

        document.body.appendChild(element);
        await Promise.resolve();
        await Promise.resolve();

        const rendered = element.shadowRoot.querySelectorAll('button[data-id]');
        expect(rendered.length).toBe(0);
    });

    it('opens window with full link when Take Assessment is clicked', async () => {
        const mockData = [{ Id: '001XYZ', Name: 'Test App' }];
        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);
        await Promise.resolve();
        await Promise.resolve();

        const openSpy = jest.spyOn(window, 'open').mockImplementation(() => {});

        const takeBtn = element.shadowRoot.querySelector('button[data-id="001XYZ"]');
        expect(takeBtn).not.toBeNull();
        takeBtn.click();

        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('https://assessment-link.com'),
            '_blank'
        );

        expect(openSpy).toHaveBeenCalledWith(
            expect.stringContaining('c__ContextId=001XYZ'),
            '_blank'
        );

        openSpy.mockRestore();
    });

    it('navigates using handleNext and handlePrev and updates DOM items', async () => {
        const mockData = Array.from({ length: 10 }, (_, i) => ({
            Id: `app${i + 1}`,
            Name: `App ${i + 1}`
        }));

        getPendingApplications.mockResolvedValue(mockData);

        const element = createElement('c-apm-my-assessment', {
            is: ApmMyAssessment
        });
        document.body.appendChild(element);
        await Promise.resolve();
        await Promise.resolve();

        let rendered = element.shadowRoot.querySelectorAll('button[data-id]');
        expect(rendered.length).toBe(8); // Page 1

        element.handleNext();
        await Promise.resolve();
        await Promise.resolve();

        rendered = element.shadowRoot.querySelectorAll('button[data-id]');
        expect(rendered.length).toBe(2); // Page 2

        element.handlePrev();
        await Promise.resolve();
        await Promise.resolve();

        rendered = element.shadowRoot.querySelectorAll('button[data-id]');
        expect(rendered.length).toBe(8); // Back to page 1
    });
});
